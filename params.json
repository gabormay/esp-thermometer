{
  "name": "ESP Thermometer",
  "tagline": "Battery operated inexpensive internet enabled thermometer built with ESP-01 WiFi module, DS18S20 digital thermometer, Arduino IDE and Ubidots",
  "body": "The objective of this project is to create a really inexpensive internet enabled thermometer to be able to monitor a room's temperature remotely.\r\n\r\n  ![Completed project photo](img/final.jpg)\r\n  \r\n# Main components\r\nHere's what you're going to need:\r\n- ESP-01, a ESP8266 chip based WiFi module (others may also work with some modifications)\r\n- DS18S20 digital thermometer chip (or compatible)\r\n- 2xAA batteries or a 3V power adapter\r\n- FTDI or USB-to-Serial (3v3!) converter (for programming the ESP8266)\r\n- some cables, and a few discrete components (see the schematic)\r\n- lot of patience :)\r\n\r\n# General notes and caveats\r\n- ESP8266 works with 3.3V, the pins are _not_ 5V tolerant!\r\n- Use an external power supply for reliable programming (not the 3.3V from the USB converter for example)\r\n- If you're stuck or have an issue with setting up the ESP8266, please  try looking through the materials in the [References](References and further reading) section and also try Google - chances are somebody else had that problem and you can find a solution quickly\r\n\r\n# First steps - programming your ESP8266\r\nStart with the installation steps from https://github.com/esp8266/Arduino#installing-with-boards-manager:\r\n- Install the Arduino IDE \r\n- Install the ESP8266 core library and select the board called 'Generic ESP8266 Module'\r\n\r\nWire up your ESP module on a breadboard as explained in https://github.com/esp8266/Arduino/blob/master/doc/boards.md#minimal-hardware-setup-for-bootloading-and-usage\r\n- Use an external power source (do not use the USB-to-serial adapter's VCC)\r\n- GND, TX and RX should be connected to the serial adapter's GND, RX and TX, respectively\r\n- CH_PD (chip enable) should be connected the VCC (10k pull-up resistor recommended)\r\n- RST and GPIO0 should be pulled-up to VCC\r\n  * For convenience, add a switch or push button to be able to pull each down to GND momentarily\r\n- Leave GPIO2 unconnected\r\n\r\nNow load the Sketch from File/Examples/ESP8266/Blink\r\n- Fill in your WiFi ssid and password\r\n- 'Verify' should show no errors\r\n\r\nNow you're ready to flash you first program to the ESP8266! Make sure that you have the Board setting in Arduino IDE set correctly:\r\n\r\n  ![Board settings in Arduino IDE](img/Board settings.png)\r\n\r\nThen put the ESP bootloader into programming mode:\r\n- Open the Serial Monitor in Arduino IDE (Tools/Serial Monitor)\r\n  * Choose the proper COM port\r\n  * Choose 74880 baud (this is necessary in order to see bootloader messages properly)\r\n- On the board, connect both `RST` and `GPIO0` to GND (push the buttons if you have added them)\r\n- Release RST (connect back to VCC), while `GPIO0` is still at GND\r\n- In the Serial Monitor you should see the following message from the bootloader:\r\n\r\n    ```\r\n     ets Jan  8 2013,rst cause:2, boot mode:(1,6)\r\n    ```\r\n    This means that the module is now in serial programming mode and ready to receive the new firmware.\r\n- `GPIO0` can now be released back to VCC\r\n- Select Sketch/Upload\r\n\r\nIn a short while the upload should finish without errors. If everything went fine the blue LED on the board will start blinking. You can now reset the board by connecting `RST` to GND momentarily. Make sure that `GPIO0` is _not_ connected to GND otherwise you will enter the programming mode again.\r\n\r\nAt this point I suggest you to play around with your ESP8266. Try changing the exampl or try other sketches. Look at the the list of functions in the [included libraries](https://github.com/esp8266/Arduino/blob/master/doc/libraries.md) and try to use them in your program.\r\n\r\nYou can use `Serial.print()` family of functions to print diagnostic messages that you can then read in the Serial Monitor. Set the baud rate to 74880 to make it consistent with the bootloader via `Serial.begin(74880)`.\r\n\r\nOnce you feel comfortable programming your ESP8266, come back here and read on.\r\n\r\n# Building the thermometer\r\n## The circuit\r\nHere's the schematic:\r\n![Schematic](img/schematic.png)\r\n\r\n\r\n## The software\r\nSee the [source](src/ESPThermometer/ESPThermometer.ino)\r\n\r\n# Running from a battery\r\n- Deep sleep\r\n- Power LED\r\n\r\n# What's next?\r\n- Dynamic WiFi setup\r\n- Dynamic Ubidots variable setup based on Chip ID\r\n- Implement additional hardware functions:\r\n  * connect a second sensor, e.g. for humidity or light\r\n  * add relay switch and control it through Ubidots\r\n  * replace Ubidots with some other (maybe custom) platform\r\n\r\n# References and further reading\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}