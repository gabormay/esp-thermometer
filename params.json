{
  "name": "ESP Thermometer",
  "tagline": "Battery operated inexpensive internet enabled thermometer built with ESP-01 WiFi module, DS18S20 digital thermometer, Arduino IDE and Ubidots",
  "body": "The objective of this project is to create a really inexpensive internet enabled thermometer to be able to monitor a room's temperature remotely.\r\n\r\n>\r\n> This is still work in progress. Please check back later.\r\n> \r\n\r\n  ![Completed project photo 1](img/final-1.jpg)\r\n  ![Completed project photo 2](img/final-2.jpg)\r\n  \r\n# Main components\r\nHere's what you're going to need:\r\n- ESP-01, a ESP8266 chip based WiFi module (others may also work with some modifications)\r\n- DS18S20 digital thermometer chip (or compatible)\r\n- 2xAA batteries or a 3V power adapter\r\n- FTDI or USB-to-Serial (3v3!) converter (for programming the ESP8266)\r\n- some cables, and a few discrete components (see the schematic)\r\n- lot of patience :)\r\n\r\n# General notes and caveats\r\n- ESP8266 works with 3.3V, the pins are _not_ 5V tolerant!\r\n- Use an external power supply for reliable programming (not the 3.3V from the USB converter for example)\r\n- If you're stuck or have an issue with setting up the ESP8266, please  try looking through the materials in the [References](References and further reading) section and also try Google - chances are somebody else had that problem and you can find a solution quickly\r\n\r\n# First steps - programming your ESP8266\r\nStart with the installation steps from https://github.com/esp8266/Arduino#installing-with-boards-manager:\r\n- Install the Arduino IDE \r\n- Install the ESP8266 core library and select the board called 'Generic ESP8266 Module'\r\n\r\nWire up your ESP module on a breadboard as explained in https://github.com/esp8266/Arduino/blob/master/doc/boards.md#minimal-hardware-setup-for-bootloading-and-usage\r\n- Use an external power source (do not use the USB-to-serial adapter's VCC)\r\n- GND, TX and RX should be connected to the serial adapter's GND, RX and TX, respectively\r\n- CH_PD (chip enable) should be connected the VCC (10k pull-up resistor recommended)\r\n- RST and GPIO0 should be pulled-up to VCC\r\n  * For convenience, add a switch or push button to be able to pull each down to GND momentarily\r\n- Leave GPIO2 unconnected\r\n\r\nNow load the Sketch from File/Examples/ESP8266/Blink\r\n- Fill in your WiFi ssid and password\r\n- 'Verify' should show no errors\r\n\r\nNow you're ready to flash you first program to the ESP8266! Make sure that you have the Board setting in Arduino IDE set correctly:\r\n\r\n  ![Board settings in Arduino IDE](img/Board settings.png)\r\n\r\nThen put the ESP bootloader into programming mode:\r\n- Open the Serial Monitor in Arduino IDE (Tools/Serial Monitor)\r\n  * Choose the proper COM port\r\n  * Choose 74880 baud (this is necessary in order to see bootloader messages properly)\r\n- On the board, connect both `RST` and `GPIO0` to GND (push the buttons if you have added them)\r\n- Release RST (connect back to VCC), while `GPIO0` is still at GND\r\n- In the Serial Monitor you should see the following message from the bootloader:\r\n\r\n    ```\r\n     ets Jan  8 2013,rst cause:2, boot mode:(1,6)\r\n    ```\r\n    This means that the module is now in serial programming mode and ready to receive the new firmware.\r\n- `GPIO0` can now be released back to VCC\r\n- Select Sketch/Upload\r\n\r\nIn a short while the upload should finish without errors. If everything went fine the blue LED on the board will start blinking. You can now reset the board by connecting `RST` to GND momentarily. Make sure that `GPIO0` is _not_ connected to GND otherwise you will enter the programming mode again.\r\n\r\nAt this point I suggest you to play around with your ESP8266. Try changing the example or try other sketches. Look at the the list of functions in the [included libraries](https://github.com/esp8266/Arduino/blob/master/doc/libraries.md) and try to use them in your program.\r\n\r\nYou can use the `Serial.print()` family of functions to print diagnostic messages that you can then read in the Serial Monitor. Set the baud rate to 74880 to make it consistent with the bootloader via `Serial.begin(74880)`.\r\n\r\nOnce you feel comfortable programming your ESP8266, come back here and read on.\r\n\r\n# Building the thermometer\r\n## The circuit\r\n\r\n   ![Schematic](img/schematic.png)\r\n\r\nExplanation:\r\n- U1 is a 2x4 DIP header for connecting the ESP module\r\n- SERIAL is a 1x3 DIP header for connecting a serial interface\r\n  * Connect GND, TX and RX to your USB-toSerial adapter's GND, RX and TX, respectively\r\n  * Double-check that the adapter uses 3.3V signal levels\r\n- RST and PRG are push buttons, activating RESET and Programming mode, respectively\r\n  * to simply reset the board, push RST\r\n  * to enter programming mode \r\n    + push RST then PRG (keep both pushed)\r\n    + Release RST then PRG\r\n- C2 is across the rails, try to put it close to the module power pins (increases stability of the board)\r\n- R1 and C1 is an RC delay circuit for reliable deep sleep operation\r\n  * purpose is to keep CH_PD low for enough time for the board to properly reset upon waking from deep sleep\r\n  * only applies if your GPIO16 is tied to CH_PD\r\n- U2 is the digital thermometer chip (DS18S20)\r\n- R2 is a pull-up\r\n\r\n## Ubidots\r\n- Register at Ubidots\r\n- Create a source with two variables:\r\n  * Temperature (unit: C)\r\n  * Battery voltage (unit: mV)\r\n- Note your API token and the ID of these two variables\r\n\r\n## The software\r\nDownload and edit the [source](src/ESPThermometer/ESPThermometer.ino)\r\n- Fill in you SSID and WiFi credentials\r\n- Fill in your Ubidots token and variable IDs (from above)\r\n\r\nConnect your circuit to the serial adapter. Make sure the serial interface is connected to the USB-to-serial adapter properly (see above) and the adapter is plugged in to an USB port on your computer\r\n\r\nConnect the power rails to an external 3.3V power source (e.g. 2xAA battery or a stabilized wall adapter)\r\n- In general anything between 2.7 - 3.3 V should work\r\n- Do **not** use the serial adapter's VCC\r\n\r\nOnce you have everything connected, you should dowload the program to the module\r\n- Put the module into program mode (push RST, PRG and then release RST, PRG)\r\n- Verify that you get the correct bootloader prompt - see [](First steps - programming your ESP8266)\r\n- Load the program into the Arduino IDE and upload (make sure to use the same settings as in [](First steps - programming your ESP8266)\r\n- Rest the board for good measure (push and release RST)\r\n\r\nIf everything went well you should see an output similar to this in the serial monitor:\r\n\r\n```\r\n ets Jan  8 2013,rst cause:2, boot mode:(3,6)\r\n\r\nload 0x4010f000, len 1384, room 16 \r\ntail 8\r\nchksum 0x2d\r\ncsum 0x2d\r\nv3ffe8654\r\n~ld\r\n√†\r\nESP Thermometer starting...\r\nChip ID: [<your chip ID here>]\r\n\r\nVCC = 2581 mV\r\nRequesting temperatures...DONE\r\nTEMP = 26.6 C\r\nConnecting and sending...\r\n.......WiFi connected\r\nIP address: \r\n192.168.178.44\r\nPosting your variables\r\nHTTP/1.1 200 OK\r\nServer: nginx\r\nDate: Wed, 31 Aug 2016 20:18:29 GMT\r\nContent-Type: application/json\r\nTransfer-Encoding: chunked\r\nConnection: close\r\nVary: Accept-Encoding\r\nVary: Accept\r\nAllow: POST, OPTIONS\r\n\r\n2c\r\n[{\"status_code\": 201}, {\"status_code\": 201}]\r\n0\r\n\r\nEntering deep sleep [ 557s ] ...\r\n\r\n ets Jan  8 2013,rst cause:1, boot mode:(3,6)\r\n\r\n[... and so on ...]\r\n\r\n```\r\n\r\n# Running from a battery\r\nI was able to run this project from 2 AA batteries for about 2 weeks - not great but not that bad either. Let's dig a little bit into how this was made possible and what can you do to further improve battery life.\r\n\r\n- Deep sleep\r\n- Power LED!\r\n- Further work\r\n  * proper deep sleep (GPIO16 to RST) with less frequent RF calibration\r\n  * use higher capacity batteries (e.g. D or A)\r\n  * update less frequently\r\n\r\n# What's next?\r\nThere are a lot of ways to further improve and extend this project. Here are a few ideas and pointers to get you started.\r\n\r\n- Dynamic WiFi setup\r\n- Dynamic Ubidots variable setup based on Chip ID\r\n- Implement additional hardware functions:\r\n  * connect a second sensor, e.g. for humidity or light\r\n  * add relay switch and control it through Ubidots\r\n  * replace Ubidots with some other (maybe custom) platform\r\n- Extend battery life (see above)\r\n\r\n# References and further reading\r\nTBD\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}